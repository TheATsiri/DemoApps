@page "/"
@using UploadFileLibrary;
@using UploadFileApp.Data;
@inject IConfiguration config
@inject ISqlDataAccess sql

<PageTitle>Upload Demo App</PageTitle>

<h1>Upload Demo</h1>


<EditForm Model="newCustomer" OnValidSubmit="SubmitForm">
    <div>
        <label for="firstName">First Name:</label>
        <InputText id="firstName" class="form-control" @bind-Value="newCustomer.FirstName" />
    </div>
    <div>
        <label for="lastName">Last Name:</label>
        <InputText id="lastName" class="form-control" @bind-Value="newCustomer.LastName" />
    </div>
    <div>
        <label for="profilePicture">Profile Picture:</label>
        <InputFile OnChange="@LoadFiles" class="form-control" accept=".png" />
    </div>
    <button class="btn btn-primary mt-3" type="submit">Create Customer</button>
</EditForm>



@if (errors.Count > 0)
{
    <h2>Errors</h2>
    <u1 class="text-danger">
        @foreach (var error in errors)
        {
            <li>@error</li>
        }
    </u1>
}

@if(customers is not null)
{
    <h2>Existing Customers</h2>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Id</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Profile Picture</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var c in customers )
            {
                <tr>
                    <td>@c.Id</td>
                    <td>@c.FirstName</td>
                    <td>@c.LastName</td>
                    <td>
                        @if(string.IsNullOrWhiteSpace(c.FileName)==false)
                        {
                            <img src="@CreateWebPath(c.FileName)" width/>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private long maxFileSize = 1024 * 1024 * 3;                     // represents 3MB
    private List<string> errors = new();
    private CustomerModel newCustomer = new();
    private IBrowserFile? file;

    private List<CustomerModel>? customers;

    private async Task LoadCustomers()
    {
        customers = await sql.LoadData<CustomerModel>(
    "dbo.spCustomer_GetAll",
    "Default",
    null);

    }
    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativePath);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }


    private async Task SubmitForm()
    {
        errors.Clear();
        try
        {
            string relativePath = await CaptureFile();
            newCustomer.FileName = relativePath;

            await sql.SaveData("dbo.spCustomer_Insert", "Default", newCustomer);

            newCustomer = new();
            file = null;
            errors.Clear();

            await LoadCustomers();
        }
        catch (Exception ex)
        {

            errors.Add($"Error: {ex.Message}");
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    private async Task<string> CaptureFile()
    {

        if (file is null)
        {
            return "";
        }

        try
        {
            string newFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(file.Name));

            string path = Path.Combine(config.GetValue<string>("FileStorage")!, "atsiriplis", newFileName);

            string realativePath = Path.Combine("atsiriplis", newFileName);

            Directory.CreateDirectory(Path.Combine(config.GetValue<string>("FileStorage")!, "atsiriplis"));

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return realativePath;
        }
        catch (Exception ex)
        {

            errors.Add($"File: {file.Name} Error: {ex.Message}");
            throw;
        }


    }

}

